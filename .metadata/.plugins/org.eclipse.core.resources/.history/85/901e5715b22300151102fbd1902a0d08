/**
 * 项目  dzah-hibernate 
 * 创建时间  2015-7-5 下午2:09:59 
 * Copyright (c) 2015, wchhuangya All rights reserved.
 * wchhuangya 专有/保密源代码,未经许可禁止任何人通过任何* 渠道使用、修改源代码.
 */

package com.ch.wchhuangya.dzah.hibernate.web;

import java.io.IOException;
import java.io.PrintWriter;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Iterator;
import java.util.List;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import com.ch.wchhuangya.dzah.hibernate.domain.Event;
import com.ch.wchhuangya.dzah.hibernate.util.HibernateUtil;
import com.ch.wchhuangya.dzah.toolkit.TimeHelper;

/**
 * 类名: EventManagerServlet <br/>
 * 功能: 事件处理的servlet。本例使用的模式为：session-per-request，即，当servlet接收到请求时，
 * 通过在SessionFactory上对getCurrentSession()方法的第一次调用 ，新的Hibernate Session就被打开了。
 * 记住，在应用中不要使用auto-commit模式 <br/>
 * 创建日期: 2015-7-5 下午2:09:59 <br/>
 * 
 * @author wchya
 * @since Jdk 1.6
 * @see
 * 
 */
public class EventManagerServlet extends HttpServlet {

	private static final long serialVersionUID = 7187091300011868759L;

	@Override
	protected void doGet(HttpServletRequest req, HttpServletResponse resp)
			throws ServletException, IOException {

		SimpleDateFormat dateFormatter = new SimpleDateFormat("dd.MM.yyyy");

		try {
			// 工作单元开始
			HibernateUtil.getSessionFactory().getCurrentSession()
					.beginTransaction();

			// 处理请求和渲染页面
			// Write HTML header
			PrintWriter out = resp.getWriter();
			out.println("<html><head><title>Event Manager</title><meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" /></head><body>");

			// Handle actions
			if ("store".equals(req.getParameter("action"))) {

				String eventTitle = new String(req.getParameter("eventTitle").getBytes("ISO-8859-1"), "UTF-8");
				String eventDate = req.getParameter("eventDate");

				if ("".equals(eventTitle) || "".equals(eventDate)) {
					out.println("<b><i>Please enter event title and date.</i></b>");
				} else {
					createAndStoreEvent(eventTitle,  
							dateFormatter.parse(TimeHelper.getDateStringForFormat("dd.MM.yyyy")));
					out.println("<b><i>Added event.</i></b>");
				}
			}

			// Print page
			printEventForm(out);
			listEvents(out, dateFormatter);

			// Write HTML footer
			out.println("</body></html>");
			out.flush();
			out.close();

			// 工作单元结束
			HibernateUtil.getSessionFactory().getCurrentSession()
					.getTransaction().commit();
		} catch (Exception ex) {
			HibernateUtil.getSessionFactory().getCurrentSession()
					.getTransaction().rollback();
			if (ServletException.class.isInstance(ex)) {
				throw (ServletException) ex;
			} else {
				throw new ServletException(ex);
			}
		}
	}
	
	private void printEventForm(PrintWriter out) {
        out.println("<h2>Add new event:</h2>");
        out.println("<form>");
        out.println("Title: <input name='eventTitle' length='50'/><br/>");
        out.println("Date (e.g. 24.12.2009): <input name='eventDate' length='10'/><br/>");
        out.println("<input type='submit' name='action' value='store'/>");
        out.println("</form>");
    }
	
	@SuppressWarnings("rawtypes")
	/**
	 * listEvents:使用绑定到当前线程的Hibernate Session来执行查询 . <br/> 
	 * 
	 * @author wchya 
	 * @param out
	 * @param dateFormatter
	 */
	private void listEvents(PrintWriter out, SimpleDateFormat dateFormatter) throws Exception {

		/** criteria建立后，若不给予任何的条件，预设是查询物件所对应表格之所有资料 */
        List result = HibernateUtil.getSessionFactory()
                .getCurrentSession().createCriteria(Event.class).list();
        if (result.size() > 0) {
            out.println("<h2>Events in database:</h2>");
            out.println("<table border='1'>");
            out.println("<tr>");
            out.println("<th>Event title</th>");
            out.println("<th>Event date</th>");
            out.println("</tr>");
            Iterator it = result.iterator();
            while (it.hasNext()) {
                Event event = (Event) it.next();
                out.println("<tr>");
                out.println("<td>" + new String(event.getTitle().getBytes("utf-8"), "ISO-8859-1") + "</td>");
                out.println("<td>" + dateFormatter.format(event.getDate()) + "</td>");
                out.println("</tr>");
            }
            out.println("</table>");
        }
    }
	
	protected void createAndStoreEvent(String title, Date theDate) {
        Event theEvent = new Event();
        theEvent.setTitle(title);
        theEvent.setDate(theDate);

        HibernateUtil.getSessionFactory()
                .getCurrentSession().save(theEvent);
    }
}
